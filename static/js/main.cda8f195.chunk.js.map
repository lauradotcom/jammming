{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","e","setState","target","value","className","placeholder","type","onChange","onClick","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","playlistName","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAAIA,E,2ECsCWC,G,8DAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,IAGV,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBACd,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBART,E,qDAWfE,KAAKN,MAAMO,SAASD,KAAKL,MAAMC,Q,uCAGlBM,GACbF,KAAKG,SAAS,CAAEP,KAAMM,EAAEE,OAAOC,QAC/BL,KAAKH,W,+BAIL,OACI,yBAAKS,UAAU,aACX,2BAAOC,YAAY,iCACXC,KAAK,OACLH,MAAOL,KAAKL,MAAMC,KAClBa,SAAUT,KAAKD,mBACvB,4BAAQO,UAAU,eACVI,QAASV,KAAKH,QADtB,e,GA3BQc,IAAMC,YCoCfC,G,oEAnCX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,SAAW,EAAKA,SAAShB,KAAd,gBAChB,EAAKiB,YAAc,EAAKA,YAAYjB,KAAjB,gBAHJ,E,uDAOfE,KAAKN,MAAMsB,MAAMhB,KAAKN,MAAMuB,S,oCAI7BjB,KAAKN,MAAMwB,SAASlB,KAAKN,MAAMuB,S,qCAI9B,OAA6B,IAAzBjB,KAAKN,MAAMyB,UACJ,4BAAQb,UAAU,eAAeI,QAASV,KAAKe,aAA/C,KAEA,4BAAQT,UAAU,eAAeI,QAASV,KAAKc,UAA/C,O,+BAKX,OACI,yBAAKR,UAAU,SACX,yBAAKA,UAAU,qBACX,4BAAKN,KAAKN,MAAMuB,MAAMG,MACtB,2BAAIpB,KAAKN,MAAMuB,MAAMI,OAArB,MAAgCrB,KAAKN,MAAMuB,MAAMK,MAAjD,MAEHtB,KAAKuB,oB,GA9BFZ,IAAMC,YCkBXY,E,uKAhBD,IAAD,OACL,OACI,yBAAKlB,UAAU,aACVN,KAAKN,MAAM+B,OAAOC,KAAI,SAAAT,GACrB,OAAO,kBAAC,EAAD,CAAOA,MAAOA,EACPU,IAAKV,EAAMW,GACXZ,MAAO,EAAKtB,MAAMsB,MAClBE,SAAU,EAAKxB,MAAMwB,SACrBC,UAAW,EAAKzB,MAAMyB,oB,GAT9BR,IAAMC,WCafiB,E,uKAXP,OACI,yBAAKvB,UAAU,iBACX,uCACA,kBAAC,EAAD,CAAWmB,OAAQzB,KAAKN,MAAMoC,cAClBd,MAAOhB,KAAKN,MAAMsB,MAClBG,WAAW,S,GAPXR,IAAMC,WCyBnBmB,G,wDAxBX,WAAYrC,GAAQ,IAAD,8BACf,cAAMA,IACDsC,iBAAmB,EAAKA,iBAAiBlC,KAAtB,gBAFT,E,6DAKFI,GACbF,KAAKN,MAAMuC,aAAa/B,EAAEE,OAAOC,S,+BAIjC,OACI,yBAAKC,UAAU,YACX,2BAAOD,MAAOL,KAAKN,MAAMwC,aACjBzB,SAAUT,KAAKgC,mBACvB,kBAAC,EAAD,CAAWP,OAAQzB,KAAKN,MAAMyC,eAClBjB,SAAUlB,KAAKN,MAAMwB,SACrBC,WAAW,IACvB,4BAAQb,UAAU,gBACVI,QAASV,KAAKN,MAAM0C,QAD5B,wB,GAlBOzB,IAAMC,YLAvByB,EAAU,CAGZC,eAHY,WAIR,GAAI9C,EACA,OAAOA,EAIX,IAAM+C,EAAmBC,OAAOC,SAASC,KAAKC,MAAM,wBAC9CC,EAAiBJ,OAAOC,SAASC,KAAKC,MAAM,sBAElD,GAAIJ,GAAoBK,EAAgB,CACpCpD,EAAc+C,EAAiB,GAC/B,IAAMM,EAAYC,OAAOF,EAAe,IAIxC,OAFAJ,OAAOO,YAAW,kBAAMvD,EAAc,KAAgB,IAAZqD,GAC1CL,OAAOQ,QAAQC,UAAU,eAAgB,KAAM,KACxCzD,EAEP,IAAM0D,EAAS,2DAvBV,mCAuBU,0EAtBP,kCAuBRV,OAAOC,SAAWS,GAI1BrD,OAzBY,SAyBLD,GACH,IAAMJ,EAAc6C,EAAQC,iBAC5B,OAAOa,MAAM,kDAAD,OAAmDvD,GAC/D,CACGwD,QAAS,CAACC,cAAc,UAAD,OAAY7D,MACnC8D,MAAK,SAAAC,GACI,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACR,OAAKA,EAAahC,OAGXgC,EAAahC,OAAOiC,MAAMhC,KAAI,SAAAT,GAAK,MAAK,CAC3CW,GAAIX,EAAMW,GACVR,KAAMH,EAAMG,KACZC,OAAQJ,EAAM0C,QAAQ,GAAGvC,KACzBE,MAAOL,EAAMK,MAAMF,KACnBwC,IAAK3C,EAAM2C,QAPJ,OAYvBC,aA9CY,SA8CCzC,EAAM0C,GACf,GAAK1C,GAAS0C,EAAUC,OAAxB,CAGA,IAEIC,EAFExE,EAAc6C,EAAQC,iBACtBc,EAAU,CAAEC,cAAc,UAAD,OAAY7D,IAE3C,OAAO2D,MAAM,gCAAiC,CAAEC,QAASA,IACpDE,MAAK,SAAAC,GACF,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GAEJ,OADAO,EAASP,EAAa7B,GACfuB,MAAM,oCAAD,OAAqCa,EAArC,cAAyD,CACjEZ,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEhD,KAAMA,MAC9BkC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GACJ,IAAMY,EAAaZ,EAAa7B,GAChC,OAAOuB,MAAM,oCAAD,OAAqCa,EAArC,sBAAyDK,EAAzD,WAA8E,CACtFjB,QAASA,EACTa,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEE,KAAOR,eAUvCzB,IM3EfA,EAAQC,iB,IAyEOiC,E,kDAtEb,WAAY7E,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXmC,cAAe,GACfI,aAAc,eACdC,eAAgB,IAElB,EAAKrB,SAAW,EAAKA,SAAShB,KAAd,gBAChB,EAAKiB,YAAc,EAAKA,YAAYjB,KAAjB,gBACnB,EAAK0E,mBAAqB,EAAKA,mBAAmB1E,KAAxB,gBAC1B,EAAK+D,aAAe,EAAKA,aAAa/D,KAAlB,gBACpB,EAAKD,OAAS,EAAKA,OAAOC,KAAZ,gBAXG,E,qDAcVmB,GACP,IAAIQ,EAASzB,KAAKL,MAAMwC,eACxB,GAAIV,EAAOgD,MAAK,SAAAC,GAAU,OAAIA,EAAW9C,KAAOX,EAAMW,MACpD,OAAOX,EAEPQ,EAAOkD,KAAK1D,GACZjB,KAAKG,SAAS,CAAEgC,eAAgBV,M,kCAGxBR,GACV,IAAIQ,EAASzB,KAAKL,MAAMwC,eACxBV,EAAOmD,QAAO,SAAAC,GAAY,OAAIA,EAAajD,KAAOX,EAAMW,MACxD5B,KAAKG,SAAS,CAAEgC,eAAgBV,M,yCAGfL,GACjBpB,KAAKG,SAAS,CAAE+B,aAAcd,M,qCAGhB,IAAD,OACP0C,EAAY9D,KAAKL,MAAMwC,eAAeT,KAAI,SAAAT,GAAK,OAAIA,EAAM2C,OAC/DvB,EAAQwB,aAAa7D,KAAKL,MAAMuC,aAAc4B,GAAWR,MAAK,WAC5D,EAAKnD,SAAS,CACZ+B,aAAc,eACdC,eAAiB,U,6BAKhBvC,GAAO,IAAD,OACXyC,EAAQxC,OAAOD,GAAM0D,MAAK,SAAAxB,GACxB,EAAK3B,SAAS,CAAE2B,cAAeA,S,+BAMjC,OACE,6BACE,iCAAM,0BAAMxB,UAAU,aAAhB,OAAN,OACA,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAWL,SAAUD,KAAKH,SAC1B,yBAAKS,UAAU,gBACb,kBAAC,EAAD,CAAewB,cAAe9B,KAAKL,MAAMmC,cAAed,MAAOhB,KAAKc,WACpE,kBAAC,EAAD,CAAUoB,aAAclC,KAAKL,MAAMuC,aACzBC,eAAgBnC,KAAKL,MAAMwC,eAC3BjB,SAAUlB,KAAKe,YACfkB,aAAcjC,KAAKwE,mBACnBpC,OAAQpC,KAAK6D,sB,GA/DjBlD,IAAMC,WCEJkE,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASpC,MACvB,2DCZNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cda8f195.chunk.js","sourcesContent":["let accessToken;\r\nconst clientId = '6b2ac9d97bdf4391a5efb499ae1f2378';\r\nconst redirectUri = 'https://jammmingcats.surge.sh/';\r\n\r\nconst Spotify = {\r\n\r\n\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        } \r\n        \r\n        //check for access token match\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            //This clears the parameters, allowing us to grab a new access token when it expires.\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        }   else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\r\n        { \r\n           headers: {Authorization: `Bearer ${accessToken}`}\r\n        }).then(response => {\r\n                    return response.json();\r\n                }).then(jsonResponse => {\r\n                if (!jsonResponse.tracks) {\r\n                    return [];\r\n                } \r\n                return jsonResponse.tracks.items.map(track => ({\r\n                    id: track.id,\r\n                    name: track.name,\r\n                    artist: track.artists[0].name,\r\n                    album: track.album.name,\r\n                    uri: track.uri\r\n                }));\r\n            });\r\n    },\r\n    \r\n    savePlaylist(name, trackUris) {\r\n        if (!name || !trackUris.length) {\r\n            return;\r\n        }\r\n        const accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}` };\r\n        let userId;\r\n        return fetch(`https://api.spotify.com/v1/me`, { headers: headers } )\r\n            .then(response => {\r\n                return response.json();\r\n            }).then(jsonResponse => {\r\n                userId = jsonResponse.id; \r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                    headers: headers,\r\n                    method: 'POST',\r\n                    body: JSON.stringify({ name: name })\r\n                }).then(response => {\r\n                    return response.json();\r\n                }).then(jsonResponse => {\r\n                    const playlistId = jsonResponse.id;\r\n                    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\r\n                        headers: headers,\r\n                        method: 'POST',\r\n                        body: JSON.stringify({ uris : trackUris })\r\n                    });\r\n                });\r\n            });\r\n        }\r\n\r\n};\r\n\r\n\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        }\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(e) {\r\n        this.setState({ term: e.target.value });\r\n        this.search();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\"\r\n                        type=\"text\"\r\n                        value={this.state.term}\r\n                        onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\"\r\n                        onClick={this.search}>\r\n                            LOOKIT</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n    \r\n   removeTrack() {\r\n       this.props.onRemove(this.props.track);\r\n   }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval === true) {\r\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button className=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album} </p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {this.props.tracks.map(track => {\r\n                  return <Track track={track} \r\n                                key={track.id} \r\n                                onAdd={this.props.onAdd} \r\n                                onRemove={this.props.onRemove} \r\n                                isRemoval={this.props.isRemoval} />;\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} \r\n                            onAdd={this.props.onAdd} \r\n                            isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.props.onNameChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input value={this.props.playlistName}\r\n                        onChange={this.handleNameChange}/>\r\n                <TrackList tracks={this.props.playlistTracks} \r\n                            onRemove={this.props.onRemove} \r\n                            isRemoval={true} />\r\n                <button className=\"Playlist-save\"\r\n                        onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\nSpotify.getAccessToken();\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      searchResults: [],\n      playlistName: 'New Playlist',\n      playlistTracks: []\n    } \n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return track;\n    } else {\n      tracks.push(track);\n      this.setState({ playlistTracks: tracks })};\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({ \n        playlistName: 'New Playlist', \n        playlistTracks : [] \n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search} />\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n            <Playlist playlistName={this.state.playlistName} \n                      playlistTracks={this.state.playlistTracks} \n                      onRemove={this.removeTrack}\n                      onNameChange={this.updatePlaylistName}\n                      onSave={this.savePlaylist} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}